
#Header

name=					VooDo
file_extensions[]=		voodo;

#Constants

__HEX_DIG				 \= ([\dA-Fa-f])
__LIT_REAL_EXP			 \= ([eE](\+|-)?\d(_*\d)*)
__LIT_REAL_SUFF			 \= ([fFsFmM])
__LIT_INT_SUFF			 \= (([lL][uU]?)|([uU][lL]?))
__LIT_INT				 \= (\d(_*\d)*$${__LIT_INT_SUFF}?)
__LIT_HEX				 \= (0[xX](_*$${__HEX_DIG})+$${__LIT_INT_SUFF}?)
__LIT_BIN				 \= (0[bB](_*[01])+$${__LIT_INT_SUFF}?)
__LIT_REAL_1			 \= ((\d(_*\d)*)?\.\d(_*\d)*$${__LIT_REAL_EXP}?$${__LIT_REAL_SUFF}?)
__LIT_REAL_2			 \= (\d(_*\d)*($${__LIT_REAL_SUFF}|($${__LIT_REAL_EXP}$${__LIT_REAL_SUFF}?)))
__LIT_NUM				 \= ($${__LIT_REAL_1}|$${__LIT_REAL_2}|$${__LIT_BIN}|$${__LIT_HEX}|$${__LIT_INT})
__LIT_STR				 \= (@"(?:[^"]|"")*"|"(?:\\.|[^\\"])*")
__ESC_CH				 \= (\\(([\\'"0abfnrtv])|(x$${__HEX_DIG}{1,4})|(u$${__HEX_DIG}{4})|(U$${__HEX_DIG}{8})))

#Styles

styles[]{

	.comment:style{
		color			= light_green
		italic			= true
		textmate_scope	= comment
	}

	.identifier:style{
		color			= white
		textmate_scope	= entity.name
	}

	.keyword:style{
		color			= light_blue
		textmate_scope	= keyword
	}

	.builtin_type:style{
		color			= violet
		textmate_scope	= keyword.type
	}

	.numeric:style{
		color			= gold
		textmate_scope	= constant.numeric
	}

	.punctuation:style{
		color			= grey
		textmate_scope	= punctuation
	}

	.string:style{
		color			= orange
		textmate_scope	= string.quoted
	}

	.char:style{
		color			= orange
		textmate_scope	= constant.character
	}

	.escaped_char:style{
		color			= brown
		textmate_scope	= constant.character.escape
	}

	.invalid:style{
		color			= red
		textmate_scope	= invalid
	}

}

#Contexts

contexts[]{

	main:context{
		:include				"comment";
		:include				"string";
		:include				"char";
		:include				"using";
		:include				"builtin_type";
		:include				"keyword";
		:include				"identifier";
		:include				"numeric";
		:include				"punctuation";
		:include				"invalid";
	}

	using:context{
		:inline_push{
			regex				 \= (using)
			styles				[]= .keyword;
			:pop{
				regex			 \= (;)
				styles			[]= .punctuation;
			}
			:pattern{
				regex			 \= (static)
				styles			[]= .keyword;
			}
			:include			"comment";
			:include			"builtin_type";
			:include			"identifier";
			:include			"type_punctuation";
			:include			"invalid";
		}
	}

	string:context{
		:include				"verbatim_string";
		:include				"simple_string";
	}

	simple_string:context{
		:inline_push{
			regex				 \= (")
			styles				[]= .punctuation;
			:pop{
				regex			 \= (")
				styles			[]= .punctuation;
			}
			:include			"escaped_char";
			:pattern{
				regex			 \= ([^"\\])
				styles			[]= .string;
			}
		}
	}

	verbatim_string:context{
		:inline_push{
			regex				 \= (@")
			styles				[]= .punctuation;
			:pop{
				regex			 \= ("(?!"))
				styles			[]= .punctuation;
			}
			:pattern{
				regex			 \= ("")
				styles			[]= .escaped_char;
			}
			:pattern{
				regex			 \= ([^"])
				styles			[]= .string;
			}
		}
	}

	numeric:context{
		:pattern{
			regex				 \= ($${__LIT_NUM})
			styles				[]= .numeric;
		}
	}

	comment:context{
		:include				"line_comment";
		:include				"multiline_comment";
	}

	line_comment:context{
		:inline_push{
			regex				 \= (/\*)
			styles				[]= .comment;
			default_style		  = .comment
			:pop{
				regex			 \= (\*/)
				styles			[]= .comment;
			}
		}
	}

	multiline_comment:context{
		:inline_push{
			regex				 \= (//)
			styles				[]= .comment;
			default_style		  = .comment
			:eol_pop {}
		}
	}

	keyword:context{
		:pattern{
			regex				 \= (as|const|default|else|false|global|glob|if|init|in|is|new|null|out|ref|return|true|var)
			styles				[]= .keyword;
		}
	}

	builtin_type:context{
		:pattern{
			regex				 \= (bool|short|ushort|int|uint|long|ulong|float|double|decimal|char|string|object)
			styles				[]= .builtin_type;
		}
	}

	identifier:context{
		:pattern{
			regex				 \= (@?)(__VooDo_Reserved[a-zA-Z_][a-zA-Z0-9_]*)
			styles				[]= .punctuation,.invalid;
		}
		:pattern{
			regex				 \= (@?)([a-zA-Z_][a-zA-Z0-9_]*)
			styles				[]= .punctuation,.identifier;
		}
	}

	char:context{
		:inline_push{
			regex				 \= (')
			styles				[]= .punctuation;
			:pop{
				regex			 \= (')
				styles			[]= .punctuation;
			}
			:pattern{
				regex			 \= ([^'\\])
				styles			[]= .char;
			}
			:include			"escaped_char";
			:include			"invalid";
		}
	}

	escaped_char:context{
		:pattern{
			regex				 \= ($${__ESC_CH})
			styles				[]= .escaped_char;
		}
	}

	punctuation:context{
		:pattern{
			regex				 \= ([.,:<>={}()?!~/*+\-&%|$;[\]])
			styles				[]= .punctuation;
		}
	}

	type_punctuation:context{
		:pattern{
			regex				 \= ([.,:<>=])
			styles				[]= .punctuation;
		}
	}

	invalid:context{
		:pattern{
			regex				 \= ([^\s])
			styles				[]= .invalid;
		}
	}

}
