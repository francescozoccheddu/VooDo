//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\franc\Documents\Visual Studio 2019\Projects\VooDo\VooDo\VooDo\Parsing\ANTLR\\VooDo.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace VooDo.Parsing.ANTLR.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class VooDoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, IF=43, ELSE=44, WHILE=45, FOREACH=46, 
		IN=47, NULL=48, BOOL=49, BIN_INT=50, OCT_INT=51, DEC_INT=52, HEX_INT=53, 
		REAL=54, STRING=55, WHITESPACE=56, MULTILINE_COMMENT=57, SINGLELINE_COMMENT=58, 
		NAME=59;
	public const int
		RULE_expr = 0, RULE_stat = 1;
	public static readonly string[] ruleNames = {
		"expr", "stat"
	};

	private static readonly string[] _LiteralNames = {
		null, "'0b'", "'0B'", "'0o'", "'0O'", "'0h'", "'0H'", "'@'", "'('", "')'", 
		"':'", "'!'", "'+'", "'-'", "'~'", "'['", "','", "']'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'^'", "'<<'", "'>>'", "'&&'", "'||'", "'<'", "'>'", 
		"'<='", "'>='", "'=='", "'!='", "'.'", "'?.'", "'??'", "'?'", "'{'", "'}'", 
		"'='", "';'", "':='", "'if'", "'else'", "'while'", "'foreach'", "'in'", 
		"'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "IF", "ELSE", "WHILE", "FOREACH", 
		"IN", "NULL", "BOOL", "BIN_INT", "OCT_INT", "DEC_INT", "HEX_INT", "REAL", 
		"STRING", "WHITESPACE", "MULTILINE_COMMENT", "SINGLELINE_COMMENT", "NAME"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VooDo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static VooDoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public VooDoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public VooDoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolLitExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(VooDoParser.BOOL, 0); }
		public BoolLitExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogNotExprContext : ExprContext {
		public ExprContext srcExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LogNotExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GtOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public GtOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DivOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PosOpExprContext : ExprContext {
		public ExprContext srcExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PosOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPosOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemOpExprContext : ExprContext {
		public ExprContext srcExpr;
		public ExprContext memberExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MemOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLitExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(VooDoParser.STRING, 0); }
		public StringLitExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameExprContext : ExprContext {
		public IToken _NAME;
		public IList<IToken> _path = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(VooDoParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(VooDoParser.NAME, i);
		}
		public NameExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EqOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExprContext : ExprContext {
		public ExprContext srcExpr;
		public ExprContext _expr;
		public IList<ExprContext> _argsExpr = new List<ExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IndexExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinIntLitExprContext : ExprContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_INT() { return GetToken(VooDoParser.BIN_INT, 0); }
		public BinIntLitExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinIntLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BwLstOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BwLstOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBwLstOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BwOrOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BwOrOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBwOrOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HexIntLitExprContext : ExprContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_INT() { return GetToken(VooDoParser.BIN_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_INT() { return GetToken(VooDoParser.OCT_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_INT() { return GetToken(VooDoParser.DEC_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INT() { return GetToken(VooDoParser.HEX_INT, 0); }
		public HexIntLitExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexIntLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExprContext : ExprContext {
		public ExprContext typeExpr;
		public ExprContext srcExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CastExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullableMemOpExprContext : ExprContext {
		public ExprContext srcExpr;
		public ExprContext memberExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public NullableMemOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableMemOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BwXorOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BwXorOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBwXorOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogOrOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogOrOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogOrOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SubOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullCoalOpExprContext : ExprContext {
		public ExprContext srcExpr;
		public ExprContext elseExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public NullCoalOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCoalOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLitExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(VooDoParser.NULL, 0); }
		public NullLitExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseOpExprContext : ExprContext {
		public ExprContext condExpr;
		public ExprContext thenExpr;
		public ExprContext elseExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IfElseOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LeOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LeOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegOpExprContext : ExprContext {
		public ExprContext srcExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BwNegExprContext : ExprContext {
		public ExprContext srcExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BwNegExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBwNegExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BwRstOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BwRstOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBwRstOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupExprContext : ExprContext {
		public ExprContext srcExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public GroupExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OctIntLitExprContext : ExprContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_INT() { return GetToken(VooDoParser.BIN_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_INT() { return GetToken(VooDoParser.OCT_INT, 0); }
		public OctIntLitExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOctIntLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallOpExprContext : ExprContext {
		public ExprContext srcExpr;
		public ExprContext _expr;
		public IList<ExprContext> _argsExpr = new List<ExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CallOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogAndOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogAndOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogAndOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public GeOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LtOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LtOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLtOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ModOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SumOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NeqOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public NeqOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeqOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RealLitExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(VooDoParser.REAL, 0); }
		public RealLitExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BwAndOpExprContext : ExprContext {
		public ExprContext lExpr;
		public ExprContext rExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BwAndOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBwAndOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecIntLitExprContext : ExprContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_INT() { return GetToken(VooDoParser.BIN_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_INT() { return GetToken(VooDoParser.OCT_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_INT() { return GetToken(VooDoParser.DEC_INT, 0); }
		public DecIntLitExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecIntLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				_localctx = new NullLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 5; Match(NULL);
				}
				break;
			case 2:
				{
				_localctx = new BoolLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6; Match(BOOL);
				}
				break;
			case 3:
				{
				_localctx = new BinIntLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8; ((BinIntLitExprContext)_localctx).value = Match(BIN_INT);
				}
				break;
			case 4:
				{
				_localctx = new OctIntLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 9;
				_la = TokenStream.LA(1);
				if ( !(_la==T__2 || _la==T__3) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10;
				((OctIntLitExprContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BIN_INT || _la==OCT_INT) ) {
					((OctIntLitExprContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				{
				_localctx = new HexIntLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 11;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__5) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 12;
				((HexIntLitExprContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIN_INT) | (1L << OCT_INT) | (1L << DEC_INT) | (1L << HEX_INT))) != 0)) ) {
					((HexIntLitExprContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				{
				_localctx = new DecIntLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 13;
				((DecIntLitExprContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIN_INT) | (1L << OCT_INT) | (1L << DEC_INT))) != 0)) ) {
					((DecIntLitExprContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 7:
				{
				_localctx = new RealLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 14; Match(REAL);
				}
				break;
			case 8:
				{
				_localctx = new StringLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 15; Match(STRING);
				}
				break;
			case 9:
				{
				_localctx = new NameExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 16; ((NameExprContext)_localctx)._NAME = Match(NAME);
				((NameExprContext)_localctx)._path.Add(((NameExprContext)_localctx)._NAME);
				State = 21;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 17; Match(T__6);
						State = 18; ((NameExprContext)_localctx)._NAME = Match(NAME);
						((NameExprContext)_localctx)._path.Add(((NameExprContext)_localctx)._NAME);
						}
						} 
					}
					State = 23;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				}
				}
				break;
			case 10:
				{
				_localctx = new GroupExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 24; Match(T__7);
				State = 25; ((GroupExprContext)_localctx).srcExpr = expr(0);
				State = 26; Match(T__8);
				}
				break;
			case 11:
				{
				_localctx = new CastExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 28; Match(T__7);
				State = 29; ((CastExprContext)_localctx).typeExpr = expr(0);
				State = 30; Match(T__9);
				State = 31; ((CastExprContext)_localctx).srcExpr = expr(0);
				State = 32; Match(T__8);
				}
				break;
			case 12:
				{
				_localctx = new LogNotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 34; Match(T__10);
				State = 35; ((LogNotExprContext)_localctx).srcExpr = expr(28);
				}
				break;
			case 13:
				{
				_localctx = new PosOpExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 36; Match(T__11);
				State = 37; ((PosOpExprContext)_localctx).srcExpr = expr(27);
				}
				break;
			case 14:
				{
				_localctx = new NegOpExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 38; Match(T__12);
				State = 39; ((NegOpExprContext)_localctx).srcExpr = expr(26);
				}
				break;
			case 15:
				{
				_localctx = new BwNegExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 40; Match(T__13);
				State = 41; ((BwNegExprContext)_localctx).srcExpr = expr(25);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 139;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new MulOpExprContext(new ExprContext(_parentctx, _parentState));
						((MulOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 44;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 45; Match(T__17);
						State = 46; ((MulOpExprContext)_localctx).rExpr = expr(24);
						}
						break;
					case 2:
						{
						_localctx = new DivOpExprContext(new ExprContext(_parentctx, _parentState));
						((DivOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 47;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 48; Match(T__18);
						State = 49; ((DivOpExprContext)_localctx).rExpr = expr(23);
						}
						break;
					case 3:
						{
						_localctx = new SumOpExprContext(new ExprContext(_parentctx, _parentState));
						((SumOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 50;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 51; Match(T__11);
						State = 52; ((SumOpExprContext)_localctx).rExpr = expr(22);
						}
						break;
					case 4:
						{
						_localctx = new SubOpExprContext(new ExprContext(_parentctx, _parentState));
						((SubOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 53;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 54; Match(T__12);
						State = 55; ((SubOpExprContext)_localctx).rExpr = expr(21);
						}
						break;
					case 5:
						{
						_localctx = new ModOpExprContext(new ExprContext(_parentctx, _parentState));
						((ModOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 56;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 57; Match(T__19);
						State = 58; ((ModOpExprContext)_localctx).rExpr = expr(20);
						}
						break;
					case 6:
						{
						_localctx = new BwAndOpExprContext(new ExprContext(_parentctx, _parentState));
						((BwAndOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 59;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 60; Match(T__20);
						State = 61; ((BwAndOpExprContext)_localctx).rExpr = expr(19);
						}
						break;
					case 7:
						{
						_localctx = new BwOrOpExprContext(new ExprContext(_parentctx, _parentState));
						((BwOrOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 62;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 63; Match(T__21);
						State = 64; ((BwOrOpExprContext)_localctx).rExpr = expr(18);
						}
						break;
					case 8:
						{
						_localctx = new BwXorOpExprContext(new ExprContext(_parentctx, _parentState));
						((BwXorOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 65;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 66; Match(T__22);
						State = 67; ((BwXorOpExprContext)_localctx).rExpr = expr(17);
						}
						break;
					case 9:
						{
						_localctx = new BwLstOpExprContext(new ExprContext(_parentctx, _parentState));
						((BwLstOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 68;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 69; Match(T__23);
						State = 70; ((BwLstOpExprContext)_localctx).rExpr = expr(16);
						}
						break;
					case 10:
						{
						_localctx = new BwRstOpExprContext(new ExprContext(_parentctx, _parentState));
						((BwRstOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 71;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 72; Match(T__24);
						State = 73; ((BwRstOpExprContext)_localctx).rExpr = expr(15);
						}
						break;
					case 11:
						{
						_localctx = new LogAndOpExprContext(new ExprContext(_parentctx, _parentState));
						((LogAndOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 74;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 75; Match(T__25);
						State = 76; ((LogAndOpExprContext)_localctx).rExpr = expr(14);
						}
						break;
					case 12:
						{
						_localctx = new LogOrOpExprContext(new ExprContext(_parentctx, _parentState));
						((LogOrOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 77;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 78; Match(T__26);
						State = 79; ((LogOrOpExprContext)_localctx).rExpr = expr(13);
						}
						break;
					case 13:
						{
						_localctx = new LtOpExprContext(new ExprContext(_parentctx, _parentState));
						((LtOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 80;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 81; Match(T__27);
						State = 82; ((LtOpExprContext)_localctx).rExpr = expr(12);
						}
						break;
					case 14:
						{
						_localctx = new GtOpExprContext(new ExprContext(_parentctx, _parentState));
						((GtOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 83;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 84; Match(T__28);
						State = 85; ((GtOpExprContext)_localctx).rExpr = expr(11);
						}
						break;
					case 15:
						{
						_localctx = new LeOpExprContext(new ExprContext(_parentctx, _parentState));
						((LeOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 86;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 87; Match(T__29);
						State = 88; ((LeOpExprContext)_localctx).rExpr = expr(10);
						}
						break;
					case 16:
						{
						_localctx = new GeOpExprContext(new ExprContext(_parentctx, _parentState));
						((GeOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 89;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 90; Match(T__30);
						State = 91; ((GeOpExprContext)_localctx).rExpr = expr(9);
						}
						break;
					case 17:
						{
						_localctx = new EqOpExprContext(new ExprContext(_parentctx, _parentState));
						((EqOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 92;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 93; Match(T__31);
						State = 94; ((EqOpExprContext)_localctx).rExpr = expr(8);
						}
						break;
					case 18:
						{
						_localctx = new NeqOpExprContext(new ExprContext(_parentctx, _parentState));
						((NeqOpExprContext)_localctx).lExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 95;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 96; Match(T__32);
						State = 97; ((NeqOpExprContext)_localctx).rExpr = expr(7);
						}
						break;
					case 19:
						{
						_localctx = new MemOpExprContext(new ExprContext(_parentctx, _parentState));
						((MemOpExprContext)_localctx).srcExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 98;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 99; Match(T__33);
						State = 100; ((MemOpExprContext)_localctx).memberExpr = expr(6);
						}
						break;
					case 20:
						{
						_localctx = new NullableMemOpExprContext(new ExprContext(_parentctx, _parentState));
						((NullableMemOpExprContext)_localctx).srcExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 101;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 102; Match(T__34);
						State = 103; ((NullableMemOpExprContext)_localctx).memberExpr = expr(5);
						}
						break;
					case 21:
						{
						_localctx = new NullCoalOpExprContext(new ExprContext(_parentctx, _parentState));
						((NullCoalOpExprContext)_localctx).srcExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 104;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 105; Match(T__35);
						State = 106; ((NullCoalOpExprContext)_localctx).elseExpr = expr(4);
						}
						break;
					case 22:
						{
						_localctx = new IfElseOpExprContext(new ExprContext(_parentctx, _parentState));
						((IfElseOpExprContext)_localctx).condExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 107;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 108; Match(T__36);
						State = 109; ((IfElseOpExprContext)_localctx).thenExpr = expr(0);
						State = 110; Match(T__9);
						State = 111; ((IfElseOpExprContext)_localctx).elseExpr = expr(3);
						}
						break;
					case 23:
						{
						_localctx = new IndexExprContext(new ExprContext(_parentctx, _parentState));
						((IndexExprContext)_localctx).srcExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 113;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 114; Match(T__14);
						State = 123;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__7) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << NULL) | (1L << BOOL) | (1L << BIN_INT) | (1L << OCT_INT) | (1L << DEC_INT) | (1L << REAL) | (1L << STRING) | (1L << NAME))) != 0)) {
							{
							State = 115; ((IndexExprContext)_localctx)._expr = expr(0);
							((IndexExprContext)_localctx)._argsExpr.Add(((IndexExprContext)_localctx)._expr);
							State = 120;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==T__15) {
								{
								{
								State = 116; Match(T__15);
								State = 117; ((IndexExprContext)_localctx)._expr = expr(0);
								((IndexExprContext)_localctx)._argsExpr.Add(((IndexExprContext)_localctx)._expr);
								}
								}
								State = 122;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 125; Match(T__16);
						}
						break;
					case 24:
						{
						_localctx = new CallOpExprContext(new ExprContext(_parentctx, _parentState));
						((CallOpExprContext)_localctx).srcExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 126;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 127; Match(T__7);
						State = 136;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__7) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << NULL) | (1L << BOOL) | (1L << BIN_INT) | (1L << OCT_INT) | (1L << DEC_INT) | (1L << REAL) | (1L << STRING) | (1L << NAME))) != 0)) {
							{
							State = 128; ((CallOpExprContext)_localctx)._expr = expr(0);
							((CallOpExprContext)_localctx)._argsExpr.Add(((CallOpExprContext)_localctx)._expr);
							State = 133;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==T__15) {
								{
								{
								State = 129; Match(T__15);
								State = 130; ((CallOpExprContext)_localctx)._expr = expr(0);
								((CallOpExprContext)_localctx)._argsExpr.Add(((CallOpExprContext)_localctx)._expr);
								}
								}
								State = 135;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 138; Match(T__8);
						}
						break;
					}
					} 
				}
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForeachStatContext : StatContext {
		public ExprContext tgtExpr;
		public ExprContext srcExpr;
		public StatContext doStat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(VooDoParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(VooDoParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ForeachStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseStatContext : StatContext {
		public ExprContext condExpr;
		public StatContext thenStat;
		public StatContext elseStat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(VooDoParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(VooDoParser.ELSE, 0); }
		public IfElseStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LinkStatContext : StatContext {
		public ExprContext tgtExpr;
		public ExprContext srcExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LinkStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatContext : StatContext {
		public ExprContext condExpr;
		public StatContext doStat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(VooDoParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public WhileStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SequenceStatContext : StatContext {
		public StatContext _stat;
		public IList<StatContext> _stats = new List<StatContext>();
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public SequenceStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequenceStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStatContext : StatContext {
		public ExprContext tgtExpr;
		public ExprContext srcExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AssignmentStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVooDoVisitor<TResult> typedVisitor = visitor as IVooDoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		int _la;
		try {
			State = 185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new SequenceStatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 144; Match(T__37);
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__7) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__37) | (1L << IF) | (1L << WHILE) | (1L << FOREACH) | (1L << NULL) | (1L << BOOL) | (1L << BIN_INT) | (1L << OCT_INT) | (1L << DEC_INT) | (1L << REAL) | (1L << STRING) | (1L << NAME))) != 0)) {
					{
					{
					State = 145; ((SequenceStatContext)_localctx)._stat = stat();
					((SequenceStatContext)_localctx)._stats.Add(((SequenceStatContext)_localctx)._stat);
					}
					}
					State = 150;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 151; Match(T__38);
				}
				break;
			case 2:
				_localctx = new IfElseStatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 152; Match(IF);
				State = 153; Match(T__7);
				State = 154; ((IfElseStatContext)_localctx).condExpr = expr(0);
				State = 155; Match(T__8);
				State = 156; ((IfElseStatContext)_localctx).thenStat = stat();
				State = 159;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 157; Match(ELSE);
					State = 158; ((IfElseStatContext)_localctx).elseStat = stat();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new WhileStatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 161; Match(WHILE);
				State = 162; Match(T__7);
				State = 163; ((WhileStatContext)_localctx).condExpr = expr(0);
				State = 164; Match(T__8);
				State = 165; ((WhileStatContext)_localctx).doStat = stat();
				}
				break;
			case 4:
				_localctx = new ForeachStatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 167; Match(FOREACH);
				State = 168; Match(T__7);
				State = 169; ((ForeachStatContext)_localctx).tgtExpr = expr(0);
				State = 170; Match(IN);
				State = 171; ((ForeachStatContext)_localctx).srcExpr = expr(0);
				State = 172; Match(T__8);
				State = 173; ((ForeachStatContext)_localctx).doStat = stat();
				}
				break;
			case 5:
				_localctx = new AssignmentStatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 175; ((AssignmentStatContext)_localctx).tgtExpr = expr(0);
				State = 176; Match(T__39);
				State = 177; ((AssignmentStatContext)_localctx).srcExpr = expr(0);
				State = 178; Match(T__40);
				}
				break;
			case 6:
				_localctx = new LinkStatContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 180; ((LinkStatContext)_localctx).tgtExpr = expr(0);
				State = 181; Match(T__41);
				State = 182; ((LinkStatContext)_localctx).srcExpr = expr(0);
				State = 183; Match(T__40);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 23);
		case 1: return Precpred(Context, 22);
		case 2: return Precpred(Context, 21);
		case 3: return Precpred(Context, 20);
		case 4: return Precpred(Context, 19);
		case 5: return Precpred(Context, 18);
		case 6: return Precpred(Context, 17);
		case 7: return Precpred(Context, 16);
		case 8: return Precpred(Context, 15);
		case 9: return Precpred(Context, 14);
		case 10: return Precpred(Context, 13);
		case 11: return Precpred(Context, 12);
		case 12: return Precpred(Context, 11);
		case 13: return Precpred(Context, 10);
		case 14: return Precpred(Context, 9);
		case 15: return Precpred(Context, 8);
		case 16: return Precpred(Context, 7);
		case 17: return Precpred(Context, 6);
		case 18: return Precpred(Context, 5);
		case 19: return Precpred(Context, 4);
		case 20: return Precpred(Context, 3);
		case 21: return Precpred(Context, 2);
		case 22: return Precpred(Context, 24);
		case 23: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '=', '\xBE', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x16', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x19', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '-', '\n', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'y', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '|', '\v', '\x2', '\x5', 
		'\x2', '~', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x86', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x89', '\v', '\x2', '\x5', '\x2', '\x8B', '\n', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x8E', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x91', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x95', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x98', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\xA2', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\xBC', 
		'\n', '\x3', '\x3', '\x3', '\x2', '\x3', '\x2', '\x4', '\x2', '\x4', '\x2', 
		'\b', '\x3', '\x2', '\x3', '\x4', '\x3', '\x2', '\x5', '\x6', '\x3', '\x2', 
		'\x34', '\x35', '\x3', '\x2', '\a', '\b', '\x3', '\x2', '\x34', '\x37', 
		'\x3', '\x2', '\x34', '\x36', '\x2', '\xED', '\x2', ',', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x6', '\a', 
		'\b', '\x2', '\x1', '\x2', '\a', '-', '\a', '\x32', '\x2', '\x2', '\b', 
		'-', '\a', '\x33', '\x2', '\x2', '\t', '\n', '\t', '\x2', '\x2', '\x2', 
		'\n', '-', '\a', '\x34', '\x2', '\x2', '\v', '\f', '\t', '\x3', '\x2', 
		'\x2', '\f', '-', '\t', '\x4', '\x2', '\x2', '\r', '\xE', '\t', '\x5', 
		'\x2', '\x2', '\xE', '-', '\t', '\x6', '\x2', '\x2', '\xF', '-', '\t', 
		'\a', '\x2', '\x2', '\x10', '-', '\a', '\x38', '\x2', '\x2', '\x11', '-', 
		'\a', '\x39', '\x2', '\x2', '\x12', '\x17', '\a', '=', '\x2', '\x2', '\x13', 
		'\x14', '\a', '\t', '\x2', '\x2', '\x14', '\x16', '\a', '=', '\x2', '\x2', 
		'\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x16', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '-', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', '\n', '\x2', 
		'\x2', '\x1B', '\x1C', '\x5', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', 
		'\v', '\x2', '\x2', '\x1D', '-', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\a', '\n', '\x2', '\x2', '\x1F', ' ', '\x5', '\x2', '\x2', '\x2', ' ', 
		'!', '\a', '\f', '\x2', '\x2', '!', '\"', '\x5', '\x2', '\x2', '\x2', 
		'\"', '#', '\a', '\v', '\x2', '\x2', '#', '-', '\x3', '\x2', '\x2', '\x2', 
		'$', '%', '\a', '\r', '\x2', '\x2', '%', '-', '\x5', '\x2', '\x2', '\x1E', 
		'&', '\'', '\a', '\xE', '\x2', '\x2', '\'', '-', '\x5', '\x2', '\x2', 
		'\x1D', '(', ')', '\a', '\xF', '\x2', '\x2', ')', '-', '\x5', '\x2', '\x2', 
		'\x1C', '*', '+', '\a', '\x10', '\x2', '\x2', '+', '-', '\x5', '\x2', 
		'\x2', '\x1B', ',', '\x6', '\x3', '\x2', '\x2', '\x2', ',', '\b', '\x3', 
		'\x2', '\x2', '\x2', ',', '\t', '\x3', '\x2', '\x2', '\x2', ',', '\v', 
		'\x3', '\x2', '\x2', '\x2', ',', '\r', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xF', '\x3', '\x2', '\x2', '\x2', ',', '\x10', '\x3', '\x2', '\x2', '\x2', 
		',', '\x11', '\x3', '\x2', '\x2', '\x2', ',', '\x12', '\x3', '\x2', '\x2', 
		'\x2', ',', '\x1A', '\x3', '\x2', '\x2', '\x2', ',', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', ',', '$', '\x3', '\x2', '\x2', '\x2', ',', '&', '\x3', '\x2', 
		'\x2', '\x2', ',', '(', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', 
		'\x2', '\x2', '-', '\x8F', '\x3', '\x2', '\x2', '\x2', '.', '/', '\f', 
		'\x19', '\x2', '\x2', '/', '\x30', '\a', '\x14', '\x2', '\x2', '\x30', 
		'\x8E', '\x5', '\x2', '\x2', '\x1A', '\x31', '\x32', '\f', '\x18', '\x2', 
		'\x2', '\x32', '\x33', '\a', '\x15', '\x2', '\x2', '\x33', '\x8E', '\x5', 
		'\x2', '\x2', '\x19', '\x34', '\x35', '\f', '\x17', '\x2', '\x2', '\x35', 
		'\x36', '\a', '\xE', '\x2', '\x2', '\x36', '\x8E', '\x5', '\x2', '\x2', 
		'\x18', '\x37', '\x38', '\f', '\x16', '\x2', '\x2', '\x38', '\x39', '\a', 
		'\xF', '\x2', '\x2', '\x39', '\x8E', '\x5', '\x2', '\x2', '\x17', ':', 
		';', '\f', '\x15', '\x2', '\x2', ';', '<', '\a', '\x16', '\x2', '\x2', 
		'<', '\x8E', '\x5', '\x2', '\x2', '\x16', '=', '>', '\f', '\x14', '\x2', 
		'\x2', '>', '?', '\a', '\x17', '\x2', '\x2', '?', '\x8E', '\x5', '\x2', 
		'\x2', '\x15', '@', '\x41', '\f', '\x13', '\x2', '\x2', '\x41', '\x42', 
		'\a', '\x18', '\x2', '\x2', '\x42', '\x8E', '\x5', '\x2', '\x2', '\x14', 
		'\x43', '\x44', '\f', '\x12', '\x2', '\x2', '\x44', '\x45', '\a', '\x19', 
		'\x2', '\x2', '\x45', '\x8E', '\x5', '\x2', '\x2', '\x13', '\x46', 'G', 
		'\f', '\x11', '\x2', '\x2', 'G', 'H', '\a', '\x1A', '\x2', '\x2', 'H', 
		'\x8E', '\x5', '\x2', '\x2', '\x12', 'I', 'J', '\f', '\x10', '\x2', '\x2', 
		'J', 'K', '\a', '\x1B', '\x2', '\x2', 'K', '\x8E', '\x5', '\x2', '\x2', 
		'\x11', 'L', 'M', '\f', '\xF', '\x2', '\x2', 'M', 'N', '\a', '\x1C', '\x2', 
		'\x2', 'N', '\x8E', '\x5', '\x2', '\x2', '\x10', 'O', 'P', '\f', '\xE', 
		'\x2', '\x2', 'P', 'Q', '\a', '\x1D', '\x2', '\x2', 'Q', '\x8E', '\x5', 
		'\x2', '\x2', '\xF', 'R', 'S', '\f', '\r', '\x2', '\x2', 'S', 'T', '\a', 
		'\x1E', '\x2', '\x2', 'T', '\x8E', '\x5', '\x2', '\x2', '\xE', 'U', 'V', 
		'\f', '\f', '\x2', '\x2', 'V', 'W', '\a', '\x1F', '\x2', '\x2', 'W', '\x8E', 
		'\x5', '\x2', '\x2', '\r', 'X', 'Y', '\f', '\v', '\x2', '\x2', 'Y', 'Z', 
		'\a', ' ', '\x2', '\x2', 'Z', '\x8E', '\x5', '\x2', '\x2', '\f', '[', 
		'\\', '\f', '\n', '\x2', '\x2', '\\', ']', '\a', '!', '\x2', '\x2', ']', 
		'\x8E', '\x5', '\x2', '\x2', '\v', '^', '_', '\f', '\t', '\x2', '\x2', 
		'_', '`', '\a', '\"', '\x2', '\x2', '`', '\x8E', '\x5', '\x2', '\x2', 
		'\n', '\x61', '\x62', '\f', '\b', '\x2', '\x2', '\x62', '\x63', '\a', 
		'#', '\x2', '\x2', '\x63', '\x8E', '\x5', '\x2', '\x2', '\t', '\x64', 
		'\x65', '\f', '\a', '\x2', '\x2', '\x65', '\x66', '\a', '$', '\x2', '\x2', 
		'\x66', '\x8E', '\x5', '\x2', '\x2', '\b', 'g', 'h', '\f', '\x6', '\x2', 
		'\x2', 'h', 'i', '\a', '%', '\x2', '\x2', 'i', '\x8E', '\x5', '\x2', '\x2', 
		'\a', 'j', 'k', '\f', '\x5', '\x2', '\x2', 'k', 'l', '\a', '&', '\x2', 
		'\x2', 'l', '\x8E', '\x5', '\x2', '\x2', '\x6', 'm', 'n', '\f', '\x4', 
		'\x2', '\x2', 'n', 'o', '\a', '\'', '\x2', '\x2', 'o', 'p', '\x5', '\x2', 
		'\x2', '\x2', 'p', 'q', '\a', '\f', '\x2', '\x2', 'q', 'r', '\x5', '\x2', 
		'\x2', '\x5', 'r', '\x8E', '\x3', '\x2', '\x2', '\x2', 's', 't', '\f', 
		'\x1A', '\x2', '\x2', 't', '}', '\a', '\x11', '\x2', '\x2', 'u', 'z', 
		'\x5', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\x12', '\x2', '\x2', 'w', 
		'y', '\x5', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 
		'y', '|', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '~', '\x3', '\x2', '\x2', '\x2', 
		'|', 'z', '\x3', '\x2', '\x2', '\x2', '}', 'u', '\x3', '\x2', '\x2', '\x2', 
		'}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x8E', '\a', '\x13', '\x2', '\x2', '\x80', '\x81', '\f', 
		'\x3', '\x2', '\x2', '\x81', '\x8A', '\a', '\n', '\x2', '\x2', '\x82', 
		'\x87', '\x5', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\x12', '\x2', 
		'\x2', '\x84', '\x86', '\x5', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x89', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x82', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8E', '\a', '\v', '\x2', '\x2', '\x8D', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x31', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', ':', '\x3', '\x2', '\x2', '\x2', '\x8D', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '@', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x46', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x8D', 'L', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', 'O', '\x3', '\x2', '\x2', '\x2', '\x8D', 'R', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', 'U', '\x3', '\x2', '\x2', '\x2', '\x8D', 'X', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '[', '\x3', '\x2', '\x2', '\x2', '\x8D', '^', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x61', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x8D', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', 'j', '\x3', '\x2', '\x2', '\x2', '\x8D', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', 's', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x3', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x96', '\a', '(', '\x2', '\x2', '\x93', 
		'\x95', '\x5', '\x4', '\x3', '\x2', '\x94', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x98', '\x3', '\x2', '\x2', '\x2', '\x96', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\xBC', '\a', ')', '\x2', '\x2', '\x9A', '\x9B', '\a', 
		'-', '\x2', '\x2', '\x9B', '\x9C', '\a', '\n', '\x2', '\x2', '\x9C', '\x9D', 
		'\x5', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', '\v', '\x2', '\x2', 
		'\x9E', '\xA1', '\x5', '\x4', '\x3', '\x2', '\x9F', '\xA0', '\a', '.', 
		'\x2', '\x2', '\xA0', '\xA2', '\x5', '\x4', '\x3', '\x2', '\xA1', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\a', '/', 
		'\x2', '\x2', '\xA4', '\xA5', '\a', '\n', '\x2', '\x2', '\xA5', '\xA6', 
		'\x5', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', '\v', '\x2', '\x2', 
		'\xA7', '\xA8', '\x5', '\x4', '\x3', '\x2', '\xA8', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\xA9', '\xAA', '\a', '\x30', '\x2', '\x2', '\xAA', '\xAB', 
		'\a', '\n', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\x2', '\x2', '\x2', 
		'\xAC', '\xAD', '\a', '\x31', '\x2', '\x2', '\xAD', '\xAE', '\x5', '\x2', 
		'\x2', '\x2', '\xAE', '\xAF', '\a', '\v', '\x2', '\x2', '\xAF', '\xB0', 
		'\x5', '\x4', '\x3', '\x2', '\xB0', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xB2', '\x5', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\a', '*', 
		'\x2', '\x2', '\xB3', '\xB4', '\x5', '\x2', '\x2', '\x2', '\xB4', '\xB5', 
		'\a', '+', '\x2', '\x2', '\xB5', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\x5', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', ',', '\x2', 
		'\x2', '\xB8', '\xB9', '\x5', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', 
		'+', '\x2', '\x2', '\xBA', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\xBB', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\x17', ',', 'z', '}', '\x87', '\x8A', '\x8D', '\x8F', '\x96', 
		'\xA1', '\xBB',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace VooDo.Parsing.ANTLR.Generated
